<div class="page container-fluid text-center p-0" style="padding-bottom: 2em !important">
    <div class="banner in-view-watcher">
        <h1><%- page.title %></h1>
        <h2><%- page.heading %></h2>
        <i class="fa-5x pt-3 <%- page.icon %>"></i>
    </div>
</div>
<div class="handbook">
    <div class="container" style="padding-bottom: 2em !important;">
        <div class="post">
            <div class="post-body row">
                <div class="assistant">
                    <div class="modal fade" id="docsAssistantModal" tabindex="-1" role="dialog" aria-labelledby="docs-assistant-modal-title" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                <h1 class="modal-title" id="docs-assistant-modal-title"><i class="fas fa-book pr-3"></i>Handbook Assistant</h1>
                                <button type="button" class="btn" data-dismiss="modal" aria-label="Close">
                                    <a class="btn-icon fas fa-times" aria-hidden="true"></a>
                                </button>
                                </div>
                                <div class="modal-body" id="docs-assistant-body">
                                    <p>This is an AI-powered TestFlows Handbook assistant that can answer your questions using the contents found in this book.<br>
                                    <span class="text-warning">💡 Note that the generated answers might not always be accurate and should be verified manually.</span></p>
                                    <div class="box-questions" id="box-questions">
                                        <div id="history"></div>
                                    </div>
                                    <div class="status-bar">
                                        <div id="docs-assistant-status" class="text-success"></div>
                                    </div>
                                    <textarea id="docs-assistant-question" class="code" name="message-context" rows="5" data-question-id="0" placeholder="What is your question?"></textarea>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary" onclick="askQuestion();"><i class="btn-icon pr-3 fas fa-paper-plane"></i>Ask</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="Top-of-the-handbook"></div>
                <nav id="sidebar" class="col-lg-4 sidebar">
                    <div id="Contents" class="sidebar-header pt-5">
                        <h3 class="d-none d-md-block">Contents</h3>
                        <h2 class="d-block d-md-none">Contents</h2>
                    </div>
                    <div>
                        <% site.pages.each(function(chapter) { %>
                            <% if (chapter.path.startsWith(page.path)) { %>
                                <% if (page.title == chapter.title) { %>
                                    <%- toc(page.content) %>
                                <% } else { %>
                                    <div><a class="toc-link" href="/<%- chapter.path %>#Contents"><%- chapter.title %></a></div>
                                <% } %>
                            <% } %>
                        <% }); %>
                    </div>
                </nav>
                <div class="col-lg-8">
                    <%- page.content %>
                    <div class="col-12 divider"></div>
                    <div class="switch-page text-center">
                        <% if (page.prev) { %>
                            <a class="previous pr-5" href="/handbook<%- url_for(page.prev) %>.html#Contents"><i class="fas fa-hand-point-left pr-2"></i>Back</a>
                        <% } %>
                        <% if (page.next) { %>
                            <a class="next" href="/handbook<%- url_for(page.next) %>.html#Contents">Next<i class="fas fa-hand-point-right pl-2"></i></a>
                        <% } %>
                    </div>
                </div>
                <div class="jump" role="group" aria-label="Control Buttons">
                    <div class="btn-group">
                        <div class="action" onclick="openDocsAssistantModal();">Ask Me?</div>
                        <div class="fas fa-chevron-circle-up" onclick="document.getElementById('Top-of-the-handbook').scrollIntoView({ behavior: 'smooth' });"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    window.addEventListener("load", function(){
        // add support to go back to TOC by clicking any header
        document.querySelectorAll("h1, h2, h3, h4, h5, h6").forEach(function(element){
            element.addEventListener("click", function(event){
                element_id = element.getAttribute("id");
                toc_element = document.querySelector(".toc .toc-item .toc-link[href=\"#" + encodeURI(element_id) + "\"]");
                toc_element.scrollIntoView({block: 'center'})
                toc_element.classList.add("active");
                // remove active class after timeout
                setTimeout(function(){
                    toc_element.classList.remove("active");
                }, 1000);
            }, true);
        });
    });

    function openDocsAssistantModal() {
        docsAssistantModal = new bootstrap.Modal(document.getElementById('docsAssistantModal'));
        docsAssistantModal.toggle();
    }

    function addQuestion(question) {
        var assistantBody = document.getElementById('docs-assistant-body');
        var historyBox = document.getElementById('history');
    
        var boxMyMessage = document.createElement('figure');
        boxMyMessage.setAttribute('onclick', 'selectMessage(event)');
        boxMyMessage.classList.add('box-my-message','highlight');

        var myMessageIcons = document.createElement('div');
        myMessageIcons.className = 'message-icon';

        var myMessageAvatarIcon = document.createElement('i');
        myMessageAvatarIcon.className = 'message-avatar-icon fas fa-users';

        var myMessageTypeIcon = document.createElement('i');
        myMessageTypeIcon.className = 'message-type-icon fas fa-keyboard';
 
        myMessageIcons.appendChild(myMessageAvatarIcon);
        myMessageIcons.appendChild(myMessageTypeIcon);

        var myMessage = document.createElement('pre');
        myMessage.classList.add('my-message','code');
        myMessage.innerText = question.value;

        boxMyMessage.appendChild(myMessageIcons);
        boxMyMessage.appendChild(myMessage);

        historyBox.appendChild(boxMyMessage);

         // scroll to the bottom
         assistantBody.scrollTop = assistantBody.scrollHeight;
         question.value = '';
    }

    function addAnswer(response) {
        var assistantBody = document.getElementById('docs-assistant-body');
        var historyBox = document.getElementById('history');

        var boxResponseMessage = document.createElement('figure');
        boxResponseMessage.classList.add('box-response-message', 'highlight');

        var chatResponseIcon = document.createElement('div');
        chatResponseIcon.className = 'message-icon fas fa-robot';

        var chatResponse = document.createElement('pre');
        chatResponse.classList.add('response-message','code');
        chatResponse.innerText = '';

        boxResponseMessage.appendChild(chatResponseIcon);
        boxResponseMessage.appendChild(chatResponse);

        historyBox.appendChild(boxResponseMessage);

        assistantBody.scrollTop = assistantBody.scrollHeight;

        function typeText(i, delay, text, element, done_callback) {
            text = text.replace('\r','');

            at_the_bottom = false;

            if (assistantBody.scrollTop + 10 > (assistantBody.scrollHeight - assistantBody.offsetHeight)) {
                at_the_bottom = true;
            }

            element.innerText += text.charAt(i);

            if (at_the_bottom) {
                assistantBody.scrollTop = assistantBody.scrollHeight;
            }

            setTimeout(function(){
                ((i < text.length - 1) ? typeText(i+1, delay, text, element, done_callback) : done_callback())
            }, delay)
        }

        typeText(0, 10, response.answer, chatResponse, function(){});

    }

    function askQuestion(){
        var question = document.getElementById('docs-assistant-question');
        var status = document.getElementById('docs-assistant-status');
        var public_token = "j23345d234dsksjfdsl23afsdfFA234"

        status.innerHTML = '⏳ Let me find the answer';
        processing = 0;
        processingStatus = setInterval(function(){status.innerHTML = '⏳ Let me find the answer' + '.'.repeat(processing); processing += 1; processing = processing % 4}, 500);

        prompt = question.value
        addQuestion(question);

        fetch(`https://api.testflows.com/public/v1/docsassistant/question`, {
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${public_token}`,
            },
            body: JSON.stringify({
                input: {
                    "prompt": prompt,
                }
            })
        })
        .then((response) => {
            if (response.ok) {
                return response.json();
            }
            throw new Error(response.status);
        })
        .then((response) => {
            console.log(response);
            status.innerHTML = '✓ Found the answer';
            addAnswer(response);
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.innerHTML = `❌ ${e}`;
            status.classList.add('text-danger');
            status.classList.remove('text-success');
        })
        .finally(() => {
            clearInterval(processingStatus);
            question.setAttribute('data-question-id', parseInt(question.getAttribute('data-question-id')) + 1);
        })
    }
</script>
